<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
					xmlns:s="library://ns.adobe.com/flex/spark"
					xmlns:mx="library://ns.adobe.com/flex/mx"
					width="100%"
					height="100%"
					addedToStage="onAddedToStage()"
					removedFromStage="onRemovedFromStage()"
					creationComplete="init()"
					xmlns:commands="it.ht.rcs.console.operations.view.commands.*">

	<fx:Script>
		<![CDATA[
			import it.ht.rcs.console.events.FilterEvent;
			import it.ht.rcs.console.events.RefreshEvent;
			import it.ht.rcs.console.evidence.controller.EvidenceManager;
			import it.ht.rcs.console.evidence.model.Evidence;
			import it.ht.rcs.console.operations.view.OperationsSection;
			import it.ht.rcs.console.operations.view.evidences.EvidenceAdvancedViewer;
			import it.ht.rcs.console.operations.view.evidences.EvidenceFileExporter;
			import it.ht.rcs.console.operations.view.evidences.ExportPopUp;
			import it.ht.rcs.console.utils.AlertPopUp;

			import locale.R;

			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;

			import spark.events.GridEvent;

			[Bindable]
			public var section:OperationsSection;

			[Bindable]
			public var dataProvider:ArrayCollection;

			private var exporter:EvidenceFileExporter;
			private var exportMonitor:ExportPopUp;

			private function onAddedToStage():void
			{
				EvidenceManager.instance.commandsFilter.target=section.stateManager.selectedTarget._id;
				EvidenceManager.instance.commandsFilter.agent=section.stateManager.selectedAgent._id;
				FlexGlobals.topLevelApplication.addEventListener(FilterEvent.FILTER_CHANGED, onRefresh);
				FlexGlobals.topLevelApplication.addEventListener(RefreshEvent.REFRESH, onRefresh);
				onRefresh()

			}

			private function init():void
			{
				exporter=new EvidenceFileExporter();
			}

			private function openDetail():void
			{
				viewer.currentItems=commandsGrid.selectedItems;
				viewer.currentIndex=commandsGrid.selectedIndices[0];
				viewer.visible=viewer.includeInLayout=true;
				commandsGrid.visible=commandsGrid.includeInLayout=false;
				actionBar.toggleDetailButton();
			}

			private function onViewerClose():void
			{
				closeViewer();

			}

			private function closeViewer():void
			{
				viewer.visible=viewer.includeInLayout=false;
				//viewer.currentItem=null;
				commandsGrid.visible=commandsGrid.includeInLayout=true;
				actionBar.toggleDetailButton();
			}

			private function onRefresh(e:Event=null):void
			{
				EvidenceManager.instance.commands(onCommandsResult)
			}

			private function onCommandsResult(e:ResultEvent):void
			{
				dataProvider=e.result as ArrayCollection;
				commandsGrid.scrollDown();
			}

			private function onRemovedFromStage():void
			{
				FlexGlobals.topLevelApplication.removeEventListener(RefreshEvent.REFRESH, onRefresh);

				if (viewer.visible)
				{
					closeViewer();
				}
			}

			private function onGridDoubleClick(e:GridEvent):void
			{

				openDetail()
			}

			private function onExportStart(e:Event):void
			{
				exportMonitor=PopUpManager.createPopUp(this as DisplayObject, ExportPopUp, true) as ExportPopUp;
				exportMonitor.exporter=exporter;
				PopUpManager.centerPopUp(exportMonitor);
			}

			private function export():void
			{
				var toExport:Vector.<Object>=new Vector.<Object>
				toExport.push(commandsGrid.selectedItem);
				exporter.export(toExport);
				exporter.addEventListener(EvidenceFileExporter.EXPORT_START, onExportStart);
			}

			private function onDelete():void
			{
				AlertPopUp.show(R.get('CONFIRM_COMMAND_DELETION'), R.get('CONFIRM'), AlertPopUp.YES | AlertPopUp.NO, null, function(e:CloseEvent):void
				{
					if (e.detail == AlertPopUp.YES)
					{
						EvidenceManager.instance.removeCommand(commandsGrid.selectedItem as Evidence, section.stateManager.selectedTarget);
						commandsGrid.dataProvider.removeItemAt(commandsGrid.selectedIndex);
						commandsGrid.selectedItem=actionBar.selectedObject=null
						if (viewer.visible)
							closeViewer();
					}
				}, null, AlertPopUp.NO);

			}

			private function toggleDetail():void
			{
				if (!viewer.visible && commandsGrid.selectedItem != null)
				{
					openDetail()
				}
				else
				{
					closeViewer()
				}
			}
		]]>
	</fx:Script>
	<commands:CommandsActionBar selectedObject="{commandsGrid.selectedItem}"
															export="export()"
															delete="onDelete()"
															id="actionBar"
															detail="toggleDetail()"
															section="{section}"/>
	<commands:CommandsAdvancedViewer id="viewer"
																	 visible="false"
																	 includeInLayout="false"
																	 dataProvider="{dataProvider}"
																	 close="onViewerClose();"
																	 section="{section}"/>
	<commands:CommandsGrid id="commandsGrid"
												 dataProvider="{dataProvider}"
												 itemDoubleClick="onGridDoubleClick(event)"/>
</s:VGroup>
