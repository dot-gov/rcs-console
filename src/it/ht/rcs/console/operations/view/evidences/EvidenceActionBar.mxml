<?xml version="1.0" encoding="utf-8"?>
<actionbar:ActionBar xmlns:fx="http://ns.adobe.com/mxml/2009"
										 xmlns:s="library://ns.adobe.com/flex/spark"
										 xmlns:mx="library://ns.adobe.com/flex/mx"
										 xmlns:actionbar="it.ht.rcs.console.main.actionbar.*"
										 xmlns:editors="it.ht.rcs.console.operations.view.evidences.actionbar.editors.*"
										 creationComplete="init()"
										 removedFromStage="onRemovedFromStage()"
										 addedToStage="onAddedToStage()">
  
  <s:Button label="{R.get('DETAIL_SHOW')}"
            click="onDetailClick()"
            icon="@Embed('/img/evidence/article32.png')"
            id="detailBtn"
            enabled="{selectedObjects.length>0}"
            />
  
  <s:Button label="{R.get('SUMMARY_SHOW')}"
            click="onSummaryClick()"
            icon="@Embed('/img/evidence/linedpaperplus32.png')"
            id="summaryBtn"
            />
  <actionbar:Separator width="20"/>
  

	<s:Button label="{R.get('EVIDENCE_DOWNLOAD')}"
						click="onExportClick()"
						icon="@Embed('/img/evidence/boxdownload32.png')"
						enabled="{selectedObjects.length>0 &amp;&amp; Console.currentSession.user.is_view_export()}"/>

  <editors:TagEditor label="{R.get('RELEVANCE')}"
                     enabled="false"
                     id="tagEditor"
                     change="onRelevanceChange(event)"
                     />
  
  <s:Button label="{R.get('REPORT_ADD')}"
            click="onReportClick()"
            enabled="false"
            icon="@Embed('/img/evidence/paperplus32.png')"
            id="reportBtn"
            />
  
  <s:Button label="{R.get('EDIT_NOTE')}"
            click="onEditNoteClick()"
            enabled="{selectedObjects.length>0  &amp;&amp; Console.currentSession.user.is_view_edit()}"
            icon="@Embed('/img/evidence/notepencil32.png')"/>

	

	<s:Button label="{R.get('DELETE')}"
						click="onDeleteClick(event)"
						enabled="{Console.currentSession.user.is_view_delete() &amp;&amp; selectedObjects.length>0}"
						icon="@Embed('/img/NEW/delete_32.png')"
						visible="{LicenseManager.instance.deletion == true}"
						includeInLayout="{LicenseManager.instance.deletion == true}"
						 horizontalCenter="0"/>
  
	<actionbar:Separator width="20"/>

	<s:Button label="{R.get('ID_COLUMN_SHOW')}"
						click="onIdClick()"
						icon="@Embed('/img/evidence/paper32.png')"
						id="idBtn"
						/>

  <s:Button label="{R.get('FILTER_PRESETS')}"
            click="openFilterPanel()"
            icon="@Embed('/img/NEW/presetFilters.png')"
             enabled="{detailBtn.label == R.get('DETAIL_SHOW')}"/>
  
  <s:Button label="{R.get('RESET_FILTERS')}"
            click="resetFilters()"
            icon="@Embed('/img/NEW/resetFilters.png')"
             enabled="{detailBtn.label == R.get('DETAIL_SHOW')}"/>

	<actionbar:Separator width="20" visible="{LicenseManager.instance.translation}" includeInLayout="{LicenseManager.instance.translation}"/>
	<s:Button label="{R.get('TRANSLATION')}"
						click="onTranslateClick()"
						icon="@Embed('/img/evidence/globe32.png')"
						id="translateBtn"
						 visible="{LicenseManager.instance.translation}" includeInLayout="{LicenseManager.instance.translation}"/>




	<fx:Metadata> 
    [Event(name="editNote", type="flash.events.Event")]
    [Event(name="summary",  type="flash.events.Event")] 
    [Event(name="export",   type="flash.events.Event")] 
    [Event(name="detail",   type="flash.events.Event")]
    [Event(name="delete",   type="flash.events.Event")]
    [Event(name="idcolumn", type="flash.events.Event")]
    [Event(name="translate", type="flash.events.Event")] 
  </fx:Metadata>

	<fx:Script>
		<![CDATA[
      import it.ht.rcs.console.DB;
      import it.ht.rcs.console.events.FilterEvent;
      import it.ht.rcs.console.evidence.controller.EvidenceManager;
      import it.ht.rcs.console.evidence.model.Evidence;
      import it.ht.rcs.console.evidence.model.TypeCount;
      import it.ht.rcs.console.monitor.controller.LicenseManager;
      import it.ht.rcs.console.operations.view.OperationsSection;
      import it.ht.rcs.console.operations.view.evidences.filters.FilterView;
      import it.ht.rcs.console.utils.AlertPopUp;
      
      import locale.R;
      
      import mx.collections.ArrayCollection;
      import mx.core.FlexGlobals;
      import mx.events.CloseEvent;
      import mx.managers.PopUpManager;
      import mx.rpc.events.ResultEvent;

			private var _selectedObjects:Vector.<Object>=new Vector.<Object>;

			[Bindable]
			private var _total:int;

			[Bindable]
			public var section:OperationsSection;

			[Bindable]
			public var evidenceView:EvidencesView;

			private var _counts:ArrayCollection;

			[Embed(source="/img/evidence/paperplus32.png")]
			public var ReportAddIcon:Class;

			[Embed(source="/img/evidence/paperminus32.png")]
			public var ReportRemoveIcon:Class;

			[Embed(source="/img/evidence/linedpaperplus32.png")]
			public var SummaryShowIcon:Class;

			[Embed(source="/img/evidence/linedpaperminus32.png")]
			public var SummaryHideIcon:Class;

			[Embed(source="/img/evidence/article32.png")]
			public var DetailShowIcon:Class;

			[Embed(source="/img/evidence/stop32.png")]
			public var DetailHideIcon:Class;

			[Embed(source="/img/evidence/papercheck32.png")]
			public var IdHideIcon:Class;

			[Embed(source="/img/evidence/paper32.png")]
			public var IdShowIcon:Class;

			[Bindable]
			public function set counts(value:ArrayCollection):void
			{
				_counts=value;

				var s:String="";
				for (var i:int=0; i < value.length; i++)
				{
					var typeCount:TypeCount=value.getItemAt(i) as TypeCount;
					if (typeCount.type == "total")
					{
						_total=typeCount.count
					}
				}
			}

			public function get counts():ArrayCollection
			{
				return _counts;
			}

			[Bindable]
			public function set selectedObjects(value:Vector.<Object>):void
			{

				_selectedObjects=value;

				if (!selectedObjects)
				{
					if(Console.currentSession.user.is_view_edit())
          {
            tagEditor.tag=0
            tagEditor.enabled=false;
            reportBtn.enabled=false;
            toggleReportButton(true);
          }
					return;
				}

				if (selectedObjects.length < 1 && Console.currentSession.user.is_view_edit())
				{
					tagEditor.tag=0;
					tagEditor.enabled=false;
					reportBtn.enabled=false;
					stage.removeEventListener(KeyboardEvent.KEY_DOWN, onKeyPress)
					stage.removeEventListener(KeyboardEvent.KEY_UP, onKeyUp)
				}

				else if (selectedObjects.length == 1 && selectedObjects[0] != null && Console.currentSession.user.is_view_edit())

				{
					tagEditor.tag=selectedObjects[0].rel;
					tagEditor.enabled=true;
					reportBtn.enabled=true;
					toggleReportButton(selectedObjects[0].blo);
					stage.addEventListener(KeyboardEvent.KEY_DOWN, onKeyPress)
					stage.addEventListener(KeyboardEvent.KEY_UP, onKeyUp)
				}
				else
				{
					if (Console.currentSession.user.is_view_edit())
					{
						tagEditor.tag=0;
						tagEditor.enabled=true;
						var blotterValue:Boolean;
						if (sameValue(selectedObjects, "blo"))
						{
							blotterValue=selectedObjects[0].blo;
						}
						if (sameValue(selectedObjects, "rel"))
						{
							tagEditor.tag=selectedObjects[0].rel;

						}
						reportBtn.enabled=true;
						toggleReportButton(blotterValue);
						stage.addEventListener(KeyboardEvent.KEY_DOWN, onKeyPress);
						stage.addEventListener(KeyboardEvent.KEY_UP, onKeyUp);
					}

				}
			}

			public function get selectedObjects():Vector.<Object>
			{
				return _selectedObjects;
			}


			public function onSummaryClick():void
			{
				dispatchEvent(new Event("summary"));
			}

			public function onIdClick():void
			{
				dispatchEvent(new Event("idcolumn"));
			}

			public function onDetailClick():void
			{
				dispatchEvent(new Event("detail"));
			}

			private function onDeleteClick(event:MouseEvent):void
			{
				if (event.altKey)
				{
					var ed:EvidenceDeletion=PopUpManager.createPopUp(root, EvidenceDeletion, true) as EvidenceDeletion;
					ed.target=section.stateManager.selectedTarget;
					ed.agent=section.stateManager.selectedAgent;
					PopUpManager.centerPopUp(ed);
					return;
				}

				AlertPopUp.show(R.get('CONFIRM_EVIDENCE_DELETION', [selectedObjects.length]), R.get('CONFIRM'), AlertPopUp.YES | AlertPopUp.NO, null, onDeletionConfirm, null, AlertPopUp.NO);
			}
      
      
      private function onDeletionConfirm(e:CloseEvent):void
      {
        if (e.detail == AlertPopUp.YES)
        {
          deleteItems()
        }
      }
      
      private function deleteItems():void
      {
        var itemsToDelete:Vector.<Object>=selectedObjects.concat();
        var len:int=itemsToDelete.length;
        for (var i:int=0; i < len; i++)
        {
          EvidenceManager.instance.removeItem(itemsToDelete[i]);
          trace("DELETION"+itemsToDelete[i]._id)
        }
        dispatchEvent(new Event("delete"));
      }

			private function init():void
			{
        translateBtn.label=R.get('TRANSLATION')
			}

			private function onKeyUp(e:KeyboardEvent):void
			{

			}


			private function onKeyPress(e:KeyboardEvent):void
			{
				trace(e.ctrlKey)
				trace(e.keyCode)



				if (Console.currentSession.user.is_view_edit())
				{

					switch (e.keyCode)
					{

						//0 key
						case 48:
							if (e.ctrlKey)
								updateRelevance(0);
							break;
						//1 key
						case 49:
							if (e.ctrlKey)
								updateRelevance(1);
							break;
						//2 key
						case 50:
							if (e.ctrlKey)
								updateRelevance(2);
							break;
						//3 key
						case 51:
							if (e.ctrlKey)
								updateRelevance(3);
							break;
						//4 key
						case 52:
							if (e.ctrlKey)
								updateRelevance(4);
							break;
						//n key
						case 78:
							if (e.ctrlKey)
							{
								e.stopPropagation()
								e.preventDefault()
								onEditNoteClick()
							}
							break;
						//r key
						case 82:
							if (e.ctrlKey)
							{
								updateReport(reportBtn.getStyle("icon") == ReportAddIcon);
								toggleReportButton(reportBtn.getStyle("icon") == ReportAddIcon)
							}
							break;
					}
				}
			}

			private function onRemovedFromStage():void
			{
        translateBtn.label=R.get('TRANSLATION')
				stage.removeEventListener(KeyboardEvent.KEY_DOWN, onKeyPress)
			}

			private function onAddedToStage():void
			{
        
			}

			private function sameValue(selectedObjects:Vector.<Object>, property:String):Boolean
			{

				var result:Boolean=true;
				var value:*=selectedObjects[0][property];

				for (var i:int=0; i < selectedObjects.length; i++)
				{

					if (selectedObjects[i][property] != value)
					{
						result=false;
						break;
					}
				}
				return result;
			}

			public function toggleDetailButton():void
			{
				if (detailBtn.label == R.get('DETAIL_SHOW'))
				{
					detailBtn.setStyle("icon", DetailHideIcon);
					detailBtn.label=R.get('DETAIL_HIDE');
				}
				else
				{
					detailBtn.setStyle("icon", DetailShowIcon);
					detailBtn.label=R.get('DETAIL_SHOW');
				}
			}

			public function toggleIdButton(visibility:Boolean):void
			{
				if (visibility)
				{
					idBtn.setStyle("icon", IdHideIcon);
					idBtn.label=R.get('ID_COLUMN_HIDE');
				}
				else
				{
					idBtn.setStyle("icon", IdShowIcon);
					idBtn.label=R.get('ID_COLUMN_SHOW');
				}
			}

			public function toggleSummaryButton(state:String):void
			{

				if (state == "count")
				{
					summaryBtn.setStyle("icon", SummaryHideIcon);
					summaryBtn.label=R.get('SUMMARY_HIDE');
				}
				else
				{
					summaryBtn.setStyle("icon", SummaryShowIcon);
					summaryBtn.label=R.get('SUMMARY_SHOW');
				}

			}

			private function toggleReportButton(value:Boolean):void
			{

				if (value)
				{
					reportBtn.setStyle("icon", ReportRemoveIcon);
					reportBtn.label=R.get('REPORT_REMOVE');
				}
				else
				{
					reportBtn.setStyle("icon", ReportAddIcon);
					reportBtn.label=R.get('REPORT_ADD');
				}

			}

			private function onExportClick():void
			{
				dispatchEvent(new Event("export"));
			}
      
      private function updateRelevance(value:int):void
      {
        if (selectedObjects != null)
        {
          
          //
          
          
          for (var i:int=0; i < selectedObjects.length; i++)
          {
            var evidence:Evidence=selectedObjects[i] as Evidence;
            evidence.rel=value
            
          }
          tagEditor.tag=value;
        }
        
      }

		/* 	private function updateRelevance(value:int):void
			{
				if (selectedObjects != null)
				{
          var evidence:Evidence;
          
          if(selectedObjects.length>1)
          {
            trace("num ev: "+selectedObjects.length)
            var ids:Array=[]
            for (var i:int=0; i < selectedObjects.length; i++)
            {
              evidence=selectedObjects[i] as Evidence;
              if(!evidence)
                evidence= EvidenceManager.instance._view.list.getItemAt(i) as Evidence
    
              if(!evidence)
              {
                trace(i+" - "+"unknown");
                continue;
              }
               
              trace(i+" - "+evidence._id);
              var id:String=evidence._id
              ids.push(id)
            }
            
            EvidenceManager.instance.update_multi(ids, {rel:value}, onMultiUpdate)
          }
          else  if(selectedObjects.length==1)
          {
              evidence=selectedObjects[0] as Evidence;
              evidence.rel=value;
          }
          
					tagEditor.tag=value;
				} 

			}
      */
      private function onMultiUpdate(e:ResultEvent):void
      {
        EvidenceManager.instance.refresh()
      }

			private function updateReport(value:Boolean):void
			{
				if (selectedObjects != null)
				{
					for (var i:int=0; i < selectedObjects.length; i++)
					{
						var evidence:Evidence=selectedObjects[i] as Evidence;
						evidence.blo=value;
					}
				}

			}

			private function onRelevanceChange(e:Event):void
			{
				var tagEditor:TagEditor=e.currentTarget as TagEditor;
				updateRelevance(tagEditor.tag);
			}

			private function onEditNoteClick():void
			{
				dispatchEvent(new Event("editNote"));
			}

			private function onTranslateClick():void
			{
        dispatchEvent(new Event("translate"));
        if(translateBtn.label==R.get('TRANSLATION'))
          translateBtn.label=R.get('ORIGINAL_LANGUAGE')
        else
        {
          translateBtn.label=R.get('TRANSLATION')
        }
       
			}

			private function onReportClick():void
			{
				var value:Boolean=(reportBtn.getStyle("icon") == ReportAddIcon);
				updateReport(value);
				toggleReportButton(value);
				// EvidenceManager.instance.updateReport([_id], true)
			}


			private function resetFilters():void
			{
 
				FlexGlobals.topLevelApplication.dispatchEvent(new FilterEvent(FilterEvent.RESET_FILTER));
        evidenceView.resetFilter();
				EvidenceManager.instance.refresh();
        
			}

			private function openFilterPanel():void
			{
				var popup:FilterView=PopUpManager.createPopUp(root, FilterView, true) as FilterView;
				popup.evidenceView=evidenceView;
				PopUpManager.centerPopUp(popup);
			}
		]]>
	</fx:Script>

</actionbar:ActionBar>
