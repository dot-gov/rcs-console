<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
					xmlns:s="library://ns.adobe.com/flex/spark"
					xmlns:mx="library://ns.adobe.com/flex/mx"
					xmlns:agents="it.ht.rcs.console.operations.view.agents.*"
					width="100%"
					height="100%"
					addedToStage="onAddedToStage()"
					removedFromStage="onRemovedFromStage()">

	<fx:Script>
		<![CDATA[
			import it.ht.rcs.console.agent.controller.AgentManager;
			import it.ht.rcs.console.agent.model.Agent;
			import it.ht.rcs.console.agent.model.Config;
			import it.ht.rcs.console.events.RefreshEvent;
			import it.ht.rcs.console.operations.view.OperationsSection;
			import it.ht.rcs.console.push.PushController;
			import it.ht.rcs.console.push.PushEvent;
			import it.ht.rcs.console.utils.TimeUtils;

			import locale.R;

			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			import mx.rpc.events.ResultEvent;

			import spark.collections.Sort;
			import spark.collections.SortField;

			[Bindable]
			public var section:OperationsSection;

			[Bindable]
			private var configs:ArrayCollection;

			private function onAddedToStage():void
			{
				FlexGlobals.topLevelApplication.addEventListener(RefreshEvent.REFRESH, refresh);
				refresh();
				if (bar)
					bar.selectedObject=grid.selectedItem;

				PushController.instance.addEventListener(PushEvent.AGENT_CONFIG, onConfigPush);
			}

			private function onRemovedFromStage():void
			{
				FlexGlobals.topLevelApplication.removeEventListener(RefreshEvent.REFRESH, refresh);
				configs=null; // to avoid flickering when switching view
				PushController.instance.removeEventListener(PushEvent.AGENT_CONFIG, onConfigPush);
			}

			private function onConfigPush(e:PushEvent):void
			{
				if (!configs)
					return;

				var c:Config;
				switch (e.data.action)
				{

					case PushEvent.CREATE:
						trace("config creation");
						c=new Config(e.data.changes);
						c._id=e.data.id;
						if (!configExists(c))
							configs.addItem(c)
						configs.refresh();
						grid.dataProvider=configs;
						break;

					case PushEvent.MODIFY:
						trace("config update");
						c=getItem(e.data.id)
						if (!c)
							return;

						for (var property:String in e.data.changes)
						{
							if (c[property])
								c[property]=e.data.changes[property];
						}
						configs.refresh();
						grid.dataProvider=configs;
						break;

				}
			}

			private function getItem(id:String):Config
			{
				for (var i:int=0; i < configs.length; i++)
				{
					var c:Config=configs.getItemAt(i) as Config;
					if (c._id == id)
						return c;
				}
				return null;
			}

			private function configExists(config:Config):Boolean
			{

				for (var i:int=0; i < configs.length; i++)
				{
					var c:Config=configs.getItemAt(i) as Config;
					if (c._id == config._id)
						return true;
				}
				return false;
			}

			private function refresh(e:Event=null):void
			{
				grid.selectedItem=bar.selectedObject=null;
				AgentManager.instance.show(section.stateManager.selectedAgent._id, function(e:ResultEvent):void
				{
					var a:Agent=e.result as Agent;
					var sort:Sort=new Sort();
					sort.fields=[new SortField('saved', true)];
					if (a.configs)
					{
						a.configs.sort=sort;
						a.configs.refresh();
						configs=a.configs;
					}
				});
			}

			private function dateLabel(item:Object, column:GridColumn):String
			{
				try
				{
					return TimeUtils.timestampFormatter(item[column.dataField] * 1000);
				}
				catch (e:Error)
				{
				}
				return '';
			}

			private function onDoubleClick(event:MouseEvent):void
			{
				if (section.stateManager.selectedAgent.status == 'open')
					section.stateManager.manageItemSelection(grid.selectedItem);
			}
		]]>
	</fx:Script>

	<agents:AgentsConfigListActionBar id="bar"
																		section="{section}"
																		selectedObject="{grid.selectedItem}"/>

	<s:DataGrid id="grid"
							width="100%"
							height="100%"
							dataProvider="{configs}"
							doubleClick="onDoubleClick(event)"
							doubleClickEnabled="true">
		<s:columns>
			<s:ArrayList>

				<s:GridColumn dataField="desc"
											headerText="{R.get('DESCRIPTION')}"/>
				<s:GridColumn dataField="user"
											headerText="{R.get('USER')}"/>
				<s:GridColumn dataField="saved"
											headerText="{R.get('SAVED')}"
											labelFunction="dateLabel"
											sortDescending="true"/>
				<s:GridColumn dataField="sent"
											headerText="{R.get('SENT_TIME')}"
											labelFunction="dateLabel"/>
				<s:GridColumn dataField="activated"
											headerText="{R.get('ACTIVATED')}"
											labelFunction="dateLabel"/>

			</s:ArrayList>
		</s:columns>
	</s:DataGrid>

</s:VGroup>
